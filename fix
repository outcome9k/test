#!/data/data/com.termux/files/usr/bin/python3
import os
import sys
import subprocess
from pathlib import Path
import zipfile

class ObfuscationBuilder:
    def __init__(self, input_file):
        self.input_file = input_file
        self.name = Path(input_file).stem
        self.dist_dir = Path("dist")
        self.binary_path = self.dist_dir / self.name
        self.dummy_file = Path("dummy.dat")
        self.strings_file = Path("strings.txt")
        self.zip_name = f"{self.name}_package.zip"

    def run_cmd(self, cmd):
        try:
            subprocess.run(cmd, shell=True, check=True)
        except subprocess.CalledProcessError as e:
            print(f"\033[91m[!] Command failed: {cmd}\033[0m")
            sys.exit(1)

    def install_dependencies(self):
        print("[•] Installing dependencies...")
        # pip upgrade ဖယ်ထားပြီး Termux friendly အတွက်သာ install
        self.run_cmd("pip install pyinstaller pycryptodome python-telegram-bot")
        # Termux packages
        self.run_cmd("pkg install -y clang termux-elf-cleaner upx")

    def create_dummy_file(self):
        if not self.dummy_file.exists():
            print("[•] Creating 10MB dummy file...")
            with open(self.dummy_file, "wb") as f:
                f.write(os.urandom(10 * 1024 * 1024))
        else:
            print("[•] Dummy file already exists.")

    def build_binary(self):
        print("[•] Building binary with PyInstaller...")
        hidden_imports = "--hidden-import Crypto --hidden-import telegram"
        add_data = f"--add-data {self.dummy_file}:."
        cmd = f"pyinstaller --onefile --clean {hidden_imports} {add_data} {self.input_file}"
        self.run_cmd(cmd)

    def clean_elf(self):
        if self.binary_path.exists():
            print("[•] Cleaning ELF binary...")
            self.run_cmd(f"termux-elf-cleaner {self.binary_path}")
        else:
            print(f"\033[93m[!] Binary not found at {self.binary_path}\033[0m")

    def extract_strings(self):
        if self.binary_path.exists():
            print("[•] Extracting strings...")
            try:
                output = subprocess.check_output(["strings", str(self.binary_path)]).decode()
                with open(self.strings_file, "w") as f:
                    f.write(output)
            except Exception as e:
                print(f"\033[91m[!] Failed to extract strings: {e}\033[0m")
        else:
            print(f"\033[93m[!] Binary not found for string extraction\033[0m")

    def create_zip(self):
        print("[•] Creating ZIP package...")
        with zipfile.ZipFile(self.zip_name, "w", zipfile.ZIP_DEFLATED) as zipf:
            if self.binary_path.exists():
                zipf.write(self.binary_path, arcname=self.binary_path.name)
            else:
                print(f"\033[93m[!] Binary file not found, skipping in ZIP\033[0m")

            if self.dummy_file.exists():
                zipf.write(self.dummy_file, arcname=self.dummy_file.name)
            if self.strings_file.exists():
                zipf.write(self.strings_file, arcname=self.strings_file.name)
        print(f"\033[92m[✓] ZIP package created: {self.zip_name}\033[0m")

    def cleanup(self):
        print("[~] Cleaning temporary files...")
        for folder in ["build", "__pycache__"]:
            p = Path(folder)
            if p.exists() and p.is_dir():
                subprocess.run(f"rm -rf {folder}", shell=True)
        spec = f"{self.name}.spec"
        if Path(spec).exists():
            Path(spec).unlink()

    def print_summary(self):
        size_kb = self.binary_path.stat().st_size // 1024 if self.binary_path.exists() else 0
        print(f"""
\033[92m[✓] Obfuscation & Build Complete!\033[0m
    ➤ Binary   : {self.binary_path if self.binary_path.exists() else 'N/A'}
    ➤ Strings  : {self.strings_file if self.strings_file.exists() else 'N/A'}
    ➤ Dummy    : {self.dummy_file if self.dummy_file.exists() else 'N/A'}
    ➤ Size     : {size_kb} KB
    ➤ ZIP      : {self.zip_name}
""")

    def main(self):
        self.install_dependencies()
        self.create_dummy_file()
        self.build_binary()
        self.clean_elf()
        self.extract_strings()
        self.create_zip()
        self.print_summary()
        self.cleanup()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python fix.py your_script.py")
        sys.exit(1)

    builder = ObfuscationBuilder(sys.argv[1])
    builder.main()
